<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.20 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC0791 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0791.xml">
<!ENTITY RFC0768 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC0793 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml">
<!ENTITY RFC0896 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0896.xml">
<!ENTITY RFC1122 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC1191 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1191.xml">
<!ENTITY RFC1981 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1981.xml">
<!ENTITY RFC2018 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2018.xml">
<!ENTITY RFC2460 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY RFC3168 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3168.xml">
<!ENTITY RFC3205 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3205.xml">
<!ENTITY RFC3390 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3390.xml">
<!ENTITY RFC3758 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3758.xml">
<!ENTITY RFC3828 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3828.xml">
<!ENTITY RFC4336 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4336.xml">
<!ENTITY RFC4340 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4340.xml">
<!ENTITY RFC4341 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4341.xml">
<!ENTITY RFC4342 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4342.xml">
<!ENTITY RFC4614 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4614.xml">
<!ENTITY RFC4821 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4821.xml">
<!ENTITY RFC4960 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4960.xml">
<!ENTITY RFC5097 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5097.xml">
<!ENTITY RFC5246 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5348 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5348.xml">
<!ENTITY RFC5405 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5405.xml">
<!ENTITY RFC5595 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5595.xml">
<!ENTITY RFC5662 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5662.xml">
<!ENTITY RFC5925 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5925.xml">
<!ENTITY RFC5681 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5681.xml">
<!ENTITY RFC6093 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6093.xml">
<!ENTITY RFC6298 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6298.xml">
<!ENTITY RFC6935 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6935.xml">
<!ENTITY RFC6936 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6936.xml">
<!ENTITY RFC6455 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6455.xml">
<!ENTITY RFC6347 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6347.xml">
<!ENTITY RFC6691 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6691.xml">
<!ENTITY RFC6824 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6824.xml">
<!ENTITY RFC7323 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7323.xml">
<!ENTITY I-D.ietf-aqm-ecn-benefits SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-aqm-ecn-benefits.xml">
]>

<rfc ipr="trust200902" docName="draft-ietf-taps-transports-02" category="info">


  <front>
    <title abbrev="TAPS Transports">Services provided by IETF transport protocols and congestion control mechanisms</title>

    <author initials="G." surname="Fairhurst" fullname="Godred Fairhurst" role="editor">
      <organization>University of Aberdeen</organization>
      <address>
        <postal>
          <street>School of Engineering, Fraser Noble Building</street>
          <city>Aberdeen AB24 3UE</city>
        </postal>
        <email>gorry@erg.abdn.ac.uk</email>
      </address>
    </author>
    <author initials="B." surname="Trammell" fullname="Brian Trammell" role="editor">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>ietf@trammell.ch</email>
      </address>
    </author>
    <author initials="M." surname="Kuehlewind" fullname="Mirja Kuehlewind" role="editor">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>mirja.kuehlewind@tik.ee.ethz.ch</email>
      </address>
    </author>

    <date year="2015" month="February" day="06"/>

    
    
    

    <abstract>


<t>This document describes services provided by existing IETF protocols and
congestion control mechanisms.  It is designed to help application and
network stack programmers and to inform the work of the IETF TAPS Working
Group.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Most Internet applications make use of the Transport Services provided by
TCP (a reliable, in-order stream protocol) or UDP (an unreliable datagram
protocol). We use the term “Transport Service” to mean the end-to-end
service provided to an application by the transport layer. That service
can only be provided correctly if information about the intended usage is
supplied from the application. The application may determine this
information at design time, compile time, or run time, and may include
guidance on whether a feature is required, a preference by the
application, or something in between. Examples of features of Transport
Services are reliable delivery, ordered delivery, content privacy to
in-path devices, integrity protection, and minimal latency.</t>

<t>The IETF has defined a wide variety of transport protocols beyond TCP and
UDP, including TCP, SCTP, DCCP, MP-TCP, and UDP-Lite. Transport services
may be provided directly by these transport protocols, or layered on top
of them using protocols such as WebSockets (which runs over TCP) or RTP
(over TCP or UDP). Services built on top of UDP or UDP-Lite typically also
need to specify additional mechanisms, including a congestion control
mechanism (such as a windowed congestion control, TFRC or LEDBAT
congestion control mechanism).  This extends the set of available
Transport Services beyond those provided to applications by TCP and UDP.</t>

<t>Transport protocols can also be differentiated by the features of the
services they provide: for instance, SCTP offers a message-based service
that does not suffer head-of-line blocking when used with multiple stream,
because it can accept blocks of data out of order, UDP-Lite provides
partial integrity protection, and LEDBAT can provide low-priority
“scavenger” communication.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The following terms are defined throughout this document, and in
subsequent documents produced by TAPS describing the composition and
decomposition of transport services.</t>

<t>[Editor Note: The terminology below was presented at the TAPS WG meeting
in Honolulu. While the factoring of the terminology seems uncontroversial,
there may be some entities which still require names (e.g. information
about the interface between the transport and lower layers which could
lead to the availablity or unavailibility of certain transport protocol
features). Comments are welcome via the TAPS mailing list.]</t>

<t><list style="hanging">
  <t hangText='Transport Service Feature:'>
  a specific end-to-end feature that a transport service provides to its
clients. Examples include confidentiality, reliable delivery, ordered
delivery, message-versus-stream orientation, etc.</t>
  <t hangText='Transport Service:'>
  a set of transport service features, without an association to any given
framing protocol, which provides a complete service to an application.</t>
  <t hangText='Transport Protocol:'>
  an implementation that provides one or more different transport services
using a specific framing and header format on the wire.</t>
  <t hangText='Transport Protocol Component:'>
  an implementation of a transport service feature within a protocol.</t>
  <t hangText='Transport Service Instance:'>
  an arrangement of transport protocols with a selected set of features
and configuration parameters that implements a single transport service,
e.g. a protocol stack (RTP over UDP).</t>
  <t hangText='Application:'>
  an entity that uses the transport layer for end-to-end delivery data
across the network (this may also be an upper layer protocol or tunnel
encpasulation).</t>
</list></t>

</section>
<section anchor="existing-transport-protocols" title="Existing Transport Protocols">

<t>This section provides a list of known IETF transport protocol and
transport protocol frameworks.</t>

<t>[Editor Note: Contributions to the subsections below are welcome]</t>

<section anchor="transport-control-protocol-tcp" title="Transport Control Protocol (TCP)">

<t>TCP is an IETF standards track transport protocol.
<xref target="RFC0793"/> introduces TCP as follows: “The
Transmission Control Protocol (TCP) is intended for use as a highly
reliable host-to-host protocol between hosts
in packet-switched computer communication networks, and in interconnected
systems of such networks.” Since its introduction, TCP has become the
default connection-oriented,
stream-based transport protocol in the Internet. It is widely implemented
by endpoints and
widely used by common applications.</t>

<section anchor="protocol-description" title="Protocol Description">

<t>TCP is a connection-oriented protocol, providing a three way handshake to allow a client and server to set up a connection, and mechanisms for orderly completion and immediate teardown of a connection. TCP is defined by a family of RFCs <xref target="RFC4614"/>.</t>

<t>TCP provides multiplexing to multiple sockets on each host using port numbers. An active TCP session is identified by its four-tuple of local and remote IP addresses and local port and remote port numbers. The destination port during connection setup has a different role as it is often used to indicate the requested service.</t>

<t>TCP partitions a continuous stream of bytes into segments, sized to fit in IP packets, constrained by the maximum size of lower layer frame. ICMP-based PathMTU discovery <xref target="RFC1191"/><xref target="RFC1981"/> as well as Packetization Layer Path MTU Discovery (PMTUD) <xref target="RFC4821"/> are supported.</t>

<t>Each byte in the stream is identified by a sequence number. The sequence number is used to order segments on receipt, to identify segments in acknowledgments, and to detect unacknowledged segments for retransmission. This is the basis of TCP’s reliable, ordered delivery of data in a stream. TCP Selective Acknowledgment <xref target="RFC2018"/> extends this mechanism by making it possible to identify missing segments more precisely, reducing spurious retransmission.</t>

<t>Receiver flow control is provided by a sliding window: limiting the amount of unacknowledged data that can be outstanding at a given time. The window scale option <xref target="RFC7323"/> allows a receiver to use windows greater than
64KB.</t>

<t>All TCP senders provide Congestion Control: This uses a separate window, where each time congestion is detected, this congestion window is reduced. A receiver detects congestion using one of three mechanisms: A retransmission timer, detection of loss (interpreted as a congestion signal), or Explicit Congestion Notification (ECN) <xref target="RFC3168"/> to provide early signaling (see <xref target="I-D.ietf-aqm-ecn-benefits"/>)</t>

<t>A TCP protocol instance can be extended <xref target="RFC4614"/> and tuned. Some features are sender-side only, requiring no negotiation with the receiver; some are receiver-side only, some are explicitly negotiated during connection setup.</t>

<t>By default, TCP segment partitioning uses Nagle’s algorithm <xref target="RFC0896"/> to buffer data at the sender into large segments, potentially incurring sender-side buffering delay; this algorithm can be disabled by the sender to transmit more immediately, e.g. to enable smoother interactive sessions.</t>

<t>[EDITOR’S NOTE: discuss URG and PSH flag]</t>

<t>A TCP service is unicast.</t>

</section>
<section anchor="interface-description" title="Interface description">

<t>A User/TCP Interface is defined in <xref target="RFC0793"/> providing six user commands: Open, Send, Receive, Close, Status. This interface does not handle configuration of TCP options or parameters beside the PUSH and URGENT flags.</t>

<t>In API implementations derived from the BSD Sockets API, TCP sockets are created using the <spanx style="verb">SOCK_STREAM</spanx> socket type.</t>

<t>The features used by a protocol instance may be set and tuned via this API.</t>

<t>(more on the API goes here)</t>

</section>
<section anchor="transport-protocol-components" title="Transport Protocol Components">

<t>The transport protocol components provided by TCP are:</t>

<t><list style="symbols">
  <t>unicast</t>
  <t>connection setup with feature negotiation and application-to-port mapping</t>
  <t>port multiplexing</t>
  <t>reliable delivery</t>
  <t>ordered delivery</t>
  <t>error detection (checksum)</t>
  <t>segmentation</t>
  <t>stream-oriented delivery in a single stream</t>
  <t>application PDU bundling (Nagle’s algorithm)</t>
  <t>flow control</t>
  <t>congestion control</t>
</list></t>

<t>[EDITOR’S NOTE: need a discussion of how to map this to features and TAPS: what does the higher
layer need to decide? what can the transport layer decide based on global
settings? what must the transport layer decide based on network
characteristics?]</t>

</section>
</section>
<section anchor="multipath-tcp-mp-tcp" title="Multipath TCP (MP-TCP)">

<t>[EDITOR’S NOTE: a few sentences describing Multipath TCP <xref target="RFC6824"/> go
here. Note that this adds transport-layer multihoming to the components
TCP provides]</t>

</section>
<section anchor="stream-control-transmission-protocol-sctp" title="Stream Control Transmission Protocol (SCTP)">

<t>SCTP <xref target="RFC4960"/> is an IETF standards track transport protocol that
provides a bidirectional s
set of logical unicast meessage streams over
a connection-oriented protocol.  The protocol and API use messages,
rather than a byte-stream.  Each stream of messages is independently
managed, therefore retransmission does not hold back data sent using
other logical streams.</t>

<t>The SCTP Partial Reliability Extension (SCTP-PR) is defined in
<xref target="RFC3758"/>.</t>

<t>[EDITOR’S NOTE: Michael Tuexen and Karen Nielsen signed up as
contributors for these sections.]</t>

<section anchor="protocol-description-1" title="Protocol Description">

<t>An SCTP service is unicast.</t>

</section>
<section anchor="interface-description-1" title="Interface Description">

<t>The SCTP API is described in the specifications published in the RFC
series.</t>

</section>
<section anchor="transport-protocol-components-1" title="Transport Protocol Components">

<t>The transport protocol components provided by SCTP are:</t>

<t><list style="symbols">
  <t>unicast</t>
  <t>connection-oriented setup with feature negotiation</t>
  <t>port multiplexing</t>
  <t>reliable or partially reliable delivery</t>
  <t>ordered delivery within a stream</t>
  <t>support for multiple prioritised streams</t>
  <t>message-oriented delivery</t>
  <t>congestion control</t>
</list></t>

<t>[EDITOR’S NOTE: update this list.]</t>

</section>
</section>
<section anchor="user-datagram-protocol-udp" title="User Datagram Protocol (UDP)">

<t>The User Datagram Protocol (UDP) <xref target="RFC0768"/> <xref target="RFC2460"/> is an
IETF standards track transport
protocol. It provides a uni-directional minimal
message-passing transport that has no inherent congestion control
mechanisms or other transport functions.  IETF guidance on the use of
UDP is provided in
<xref target="RFC5405"/>. UDP is widely implemented by endpoints and
widely used by common applications.</t>

<t>[EDITOR’S NOTE: Kevin Fall signed up as a contributor for this section.]</t>

<section anchor="protocol-description-2" title="Protocol Description">

<t>UDP is a connection-less datagram protocol, with no connection setup 
or feature negotiation. The protocol and API use messages,
rather than a byte-stream.  Each stream of messages is independently
managed, therefore retransmission does not hold back data sent using
other logical streams.</t>

<t>It provides multiplexing to multiple sockets on each host using port numbers.
An active UDP session is identified by its four-tuple of local and remote IP
addresses and local port and remote port numbers.</t>

<t>UDP fragments packets into IP packets, constrained by the maximum size
of lower layer frame.</t>

<t>Mechanisms for receiver flow control, congestion control, PathMTU
discovery, support for ECN, etc need to be provided by
upper layer protocols <xref target="RFC5405"/>.</t>

<t>For IPv4 the UDP checksum is optional, but recommended for use in
the general Internet <xref target="RFC5405"/>. <xref target="RFC2460"/> requires the use of this
checksum for IPv6, but <xref target="RFC6935"/> permits this to be relaxed for
specific types of application. The checksum support considerations
for omitting the checksum are defined in
<xref target="RFC6936"/>.</t>

<t>A UDP service may support IPv4 broadcast, multicast, anycast and unicast.</t>

</section>
<section anchor="interface-description-2" title="Interface Description">

<t>There is no current API specified in the RFC Series, but guidance on
use of common APIs is provided in <xref target="RFC5405"/>.</t>

</section>
<section anchor="transport-protocol-components-2" title="Transport Protocol Components">

<t>The transport protocol components provided by UDP are:</t>

<t><list style="symbols">
  <t>unicast</t>
  <t>IPv4 broadcast, multicast and anycast</t>
  <t>non-reliable, non-ordered delivery</t>
  <t>message-oriented delivery</t>
  <t>optional checksum protection.</t>
</list></t>

</section>
</section>
<section anchor="lightweight-user-datagram-protocol-udp-lite" title="Lightweight User Datagram Protocol (UDP-Lite)">

<t>The Lightweight User Datagram Protocol (UDP-Lite) <xref target="RFC3828"/> is an IETF
standards track transport protocol.
UDP-Lite provides a bidirectional set of logical unicast or
multicast message streams over
a datagram protocol. IETF guidance on the use of UDP-Lite is provided in
<xref target="RFC5405"/>.</t>

<t>[EDITOR’S NOTE: Gorry Fairhurst signed up as a contributor for this
section.]</t>

<section anchor="protocol-description-3" title="Protocol Description">

<t>UDP-Lite is a connection-less datagram protocol,
with no connection setup or feature negotiation.
The protocol and API use messages,
rather than a byte-stream.  Each stream of messages is independently
managed, therefore retransmission does not hold back data sent using
other logical streams.</t>

<t>It provides multiplexing to multiple sockets on each host using port
numbers.
An active UDP-Lite session is identified by its four-tuple of local and
remote IP
addresses and local port and remote port numbers.</t>

<t>UDP-Lite fragments packets into IP packets, constrained by the maximum
size
of lower layer frame.</t>

<t>UDP-Lite changes the semantics of the UDP “payload length” field to
that of a “checksum coverage length” field.  Otherwise, UDP-Lite is
semantically identical to UDP.  Applications using UDP-Lite therefore
can not make
assumptions regarding the correctness of the data received in the
insensitive part of the UDP-Lite payload.</t>

<t>As for UDP, mechanisms for receiver flow control, congestion control,
PathMTU
discovery, support for ECN, etc need to be provided by
upper layer protocols <xref target="RFC5405"/>.</t>

<t>Examples of use include a class of applications that
can derive benefit from having
partially-damaged payloads delivered, rather than discarded. One
use is to support are
tolerate payload corruption and over paths that include error-prone links,
another
application is when header integrity checks are required but
payload integrity is provided by some other mechanism (e.g. <xref target="RFC6936"/>.</t>

<t>A UDP-Lite service may support IPv4 broadcast, multicast, anycast and
unicast.</t>

</section>
<section anchor="interface-description-3" title="Interface Description">

<t>There is no current API specified in the RFC Series, but guidance on
use of common APIs is provided in <xref target="RFC5405"/>.</t>

<t>The interface of UDP-Lite differs
from that of UDP by the addition of a single (socket) option that
communicates a checksum coverage length value: at the sender, this
specifies the intended checksum coverage, with the remaining
unprotected part of the payload called the “error-insensitive part”.
The checksum coverage may also be made visible to the application
via the UDP-Lite MIB module <xref target="RFC5097"/>.</t>

</section>
<section anchor="transport-protocol-components-3" title="Transport Protocol Components">

<t>The transport protocol components provided by UDP-Lite are:</t>

<t><list style="symbols">
  <t>unicast</t>
  <t>IPv4 broadcast, multicast and anycast</t>
  <t>non-reliable, non-ordered delivery</t>
  <t>message-oriented delivery</t>
  <t>partial integrity protection</t>
</list></t>

</section>
</section>
<section anchor="datagram-congestion-control-protocol-dccp" title="Datagram Congestion Control Protocol (DCCP)">

<t>Datagram Congestion Control Protocol (DCCP) <xref target="RFC4340"/> is an
IETF standards track
bidirectional transport protocol that provides unicast connections of
congestion-controlled unreliable messages.  DCCP is suitable for
applications that transfer fairly large amounts of data and that can
benefit from control over the trade off between timeliness and
reliability <xref target="RFC4336"/>.</t>

<t>[EDITOR’S NOTE: Gorry Fairhurst signed up as a contributor for this
section.]</t>

<section anchor="protocol-description-4" title="Protocol Description">

<t>DCCP is a connection-oriented datagram protocol, providing a three way
handshake to allow a client and server to set up a connection,
and mechanisms for orderly completion and immediate teardown of
a connection. The protocol is defined by a family of RFCs.</t>

<t>It provides multiplexing to multiple sockets on each host using
port numbers. An active DCCP session is identified by its four-tuple
of local and remote IP addresses and local port and remote port numbers.
At connection setup, DCCP also exchanges the the service code <xref target="RFC5595"/>
mechanism to allow transport instantiations to indicate
the service treatment that is expected from the network.</t>

<t>The protocol segments data into messages, sized to
fit in IP packets, constrained by the maximum size of lower layer frame.
Each message
is identified by a sequence number. The sequence number is used to
identify segments
in acknowledgments, to detect unacknowledged segments, to measure RTT,
etc.
The protocol may support ordered or unordered delivery of data, and does
not
itself provide retransmission.</t>

<t>Receiver flow control is supported: limiting the amount of
unacknowledged data
that can be outstanding at a given time.</t>

<t>A DCCP protocol instance can be extended <xref target="RFC4340"/> and tuned.
Some features are sender-side only, requiring no negotiation with the
receiver;
some are receiver-side only, some are explicitly negotiated during
connection setup.</t>

<t>DCCP supports negotiation of the congestion control profile,
examples of specified profiles include
<xref target="RFC4341"/> <xref target="RFC4342"/> <xref target="RFC5662"/>.
All IETF-defined methods provide Congestion Control.</t>

<t>Examples of suitable applications include interactive applications,
streaming media or on-line games <xref target="RFC4336"/>.</t>

<t>A DCCP service is unicast.</t>

</section>
<section anchor="interface-description-4" title="Interface Description">

<t>There is no current API specified in the RFC Series.</t>

</section>
<section anchor="transport-protocol-components-4" title="Transport Protocol Components">

<t>The transport protocol components provided by DCCP are:</t>

<t><list style="symbols">
  <t>unicast</t>
  <t>connection-oriented setup</t>
  <t>feature negotiation</t>
  <t>non-reliable, ordered delivery</t>
  <t>message-oriented delivery</t>
  <t>partial integrity protection</t>
</list></t>

</section>
</section>
<section anchor="realtime-transport-protocol-rtp" title="Realtime Transport Protocol (RTP)">

<t>RTP provides an end-to-end network transport service, suitable for
applications transmitting real-time data, such as audio, video or
data, over multicast or unicast network services, including TCP, UDP,
UDP-Lite, DCCP.</t>

<t>[EDITOR’S NOTE: Varun Singh signed up as contributor for this section.]</t>

</section>
<section anchor="transport-layer-security-tls-and-datagram-tls-dtls-as-a" title="Transport Layer Security (TLS) and Datagram TLS (DTLS) as a">
<t>pseudotransport</t>

<t>(A few words on TLS <xref target="RFC5246"/> and DTLS <xref target="RFC6347"/> here, and how they get used by other protocols to meet security goals as an add-on interlayer above transport.)</t>

<section anchor="protocol-description-5" title="Protocol Description">

</section>
<section anchor="interface-description-5" title="Interface Description">

</section>
<section anchor="transport-protocol-components-5" title="Transport Protocol Components">

</section>
</section>
<section anchor="hypertext-transport-protocol-http-as-a-pseudotransport" title="Hypertext Transport Protocol (HTTP) as a pseudotransport">

<t><xref target="RFC3205"/></t>

<t>[EDITOR’S NOTE: No identified contributor for this section yet.]</t>

<section anchor="protocol-description-6" title="Protocol Description">

</section>
<section anchor="interface-description-6" title="Interface Description">

</section>
<section anchor="transport-protocol-components-6" title="Transport Protocol Components">

</section>
</section>
<section anchor="websockets" title="WebSockets">

<t><xref target="RFC6455"/></t>

<t>[EDITOR’S NOTE: No identified contributor for this section yet.]</t>

<section anchor="protocol-description-7" title="Protocol Description">

</section>
<section anchor="interface-description-7" title="Interface Description">

</section>
<section anchor="transport-protocol-components-7" title="Transport Protocol Components">

</section>
</section>
</section>
<section anchor="transport-service-features" title="Transport Service Features">

<t>[EDITOR’S NOTE: this section will drawn from the candidate features provided by protocol components in the
previous section – please discuss on taps@ietf.org list]</t>

<section anchor="complete-protocol-feature-matrix" title="Complete Protocol Feature Matrix">

<t>[EDITOR’S NOTE: Dave Thaler has signed up as a contributor for this section. Michael Welzl also has a beginning of a matrix which could be useful here.]</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no considerations for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document surveys existing transport protocols and protocols providing transport-like services. Confidentiality, integrity, and authenticity are among the features provided by those services. This document does not specify any new components or mechanisms for providing these features. Each RFC listed in this document discusses the security considerations of the specification it contains.</t>

</section>
<section anchor="contributors" title="Contributors">

<t>Non-editor contributors of text will be listed here, as in the authors
section.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This work is partially supported by the European Commission under grant
agreement FP7-ICT-318627 mPlane; support does not imply endorsement.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC0791;


    </references>

    <references title='Informative References'>

&RFC0768;
&RFC0793;
&RFC0896;
&RFC1122;
&RFC1191;
&RFC1981;
&RFC2018;
&RFC2460;
&RFC3168;
&RFC3205;
&RFC3390;
&RFC3758;
&RFC3828;
&RFC4336;
&RFC4340;
&RFC4341;
&RFC4342;
&RFC4614;
&RFC4821;
&RFC4960;
&RFC5097;
&RFC5246;
&RFC5348;
&RFC5405;
&RFC5595;
&RFC5662;
&RFC5925;
&RFC5681;
&RFC6093;
&RFC6298;
&RFC6935;
&RFC6936;
&RFC6455;
&RFC6347;
&RFC6691;
&RFC6824;
&RFC7323;
&I-D.ietf-aqm-ecn-benefits;


    </references>



  </back>
</rfc>

